#!/usr/bin/ruby --disable-gems

autoload :Date, "date"
autoload :FileUtils, "fileutils"

class TagsCommand
  def call(_args, config)
    exec "ls", config.directory
  end
end

class NewCommand
  def call(args, config)
    if args.empty?
      warn "tag required"
      exit 1
    end

    tag = args.shift

    tag_dir = File.join(config.directory, tag)
    timestamp = Date.today.strftime("%Y-%m-%d")
    note_path = File.join(tag_dir, "#{timestamp}.md")

    FileUtils.mkdir_p(tag_dir)

    exec config.editor, note_path
  end
end

class LastCommand
  def call(args, config)
    if args.empty?
      warn "tag required"
      exit 1
    end

    tag = args.shift

    tag_dir = File.join(config.directory, tag)
    last = Dir.entries(tag_dir).max
    note_path = File.join(tag_dir, last)

    exec config.editor, note_path
  end
end

class FindCommand
  def call(args, config)
    if args.empty?
      warn "Need a search term"
      exit 1
    end

    query = args.join(" ")
    file_with_match = `ag '#{query}' #{config.directory} | fzf`.strip
    matches = file_with_match.match(/\A(?<path>[^:]+):(?<line>\d+)/)

    if matches
      exec "kak #{matches[:path]} +#{matches[:line]}"
    end
  end
end

class MissingCommand
  def call(*)
    warn "Unrecognized command"
    warn "Available commands: #{COMMANDS.keys.join(', ')}"
    exit 1
  end
end

COMMANDS = {
  "find" => FindCommand,
  "last" => LastCommand,
  "new" => NewCommand,
  "tags" => TagsCommand,
}.freeze

Config = Struct.new(:directory, :editor)

config = Config.new(
  File.expand_path(ENV.fetch("NOTES_DIR", "~/.notes")),
  ENV.fetch("EDITOR"),
)

if ARGV.empty?
  warn "command required"
  exit 1
end

command = ARGV.shift
command_class = COMMANDS.fetch(command, MissingCommand)
command_class.new.(ARGV.dup, config)
